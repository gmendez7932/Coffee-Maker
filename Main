/**
 *  Lab 6
 *  CS160L
 *
 *  Main - Where the program enters. It contains many of the methods related to the user experience.
 *  Methods that prompt the user for input go here. As well as the methods that alter files.
 *
 *  6/28/23
 *  @author  Gabriel Mendez
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

public class Main
{
    private static Map<String, Integer> inventory = new TreeMap<String, Integer>();
    private static List<CoffeeOrder> orders = new ArrayList<CoffeeOrder>();
    private static String logFile = "OrderLog.txt";
    private static String inventoryFile = "Inventory.txt";

    /**
     * The main entry point for the Coffee Maker application.
     * This application allows users to place coffee orders, manage inventory, and update order logs.
     * It provides a menu-driven interface for user interaction.
     *
     * Usage: java CoffeeMaker
     *
     * This class initializes the inventory, reads user input, and handles menu options.
     * The inventory is loaded from a file, and orders and inventory updates are written back to files.
     * The application runs until the user chooses to exit.
     *
     */
    public static void main(String[] args)
    {
        readInventory(inventoryFile); // Load inventory from file
        System.out.println("Welcome to Java Coffee Co.!");
        try (Scanner input = new Scanner(System.in))
        {
            boolean exit = false;
            while (!exit)
            {
                System.out.println("\nMENU OPTIONS:");
                System.out.println("1. New Order");
                System.out.println("2. Reload Inventory");
                System.out.println("3. Update Inventory");
                System.out.println("4. Expand Inventory");
                System.out.println("5. Update Order Log");
                System.out.println("6. Exit Application");

                int option = 0;
                while (option < 1 || option > 6)
                {
                    if (!input.hasNextInt())
                    {
                        System.out.println("Please enter a valid number.");
                        input.nextLine(); //Consume newline
                    }
                    else
                    {
                        option = input.nextInt();
                        if (option < 1 || option > 6)
                        {
                            System.out.println("Please enter a valid option.");
                            input.nextLine(); // Consume newline

                        }
                    }
                }
                input.nextLine(); // Consume newline

                switch (option)
                {
                    case 1:
                        CoffeeOrder order = buildOrder();
                        orders.add(order);
                        System.out.println(order.printOrder());
                        break;
                    case 2:
                        readInventory(inventoryFile);
                        System.out.println("Current Inventory:");
                        printInventory();
                        break;
                    case 3:
                        writeInventory(inventoryFile);
                        System.out.println("Inventory updated successfully!");
                        break;
                    case 4:
                        boolean continueAdding = true;
                        expandInventory(continueAdding);
                        if (continueAdding)
                        {
                            System.out.println("Inventory expanded successfully!");
                        }
                        else
                        {
                            System.out.println("An error occurred while expanding inventory.");
                        }
                        break;
                    case 5:
                        writeOrderLog(logFile);
                        System.out.println("Order log updated successfully!");
                        break;
                    case 6:
                        exit = true;
                        if (orders.size() > 0)
                        {
                            writeOrderLog(logFile);
                            System.out.println("Order log updated successfully!");
                        }
                        writeInventory(inventoryFile);
                        System.out.println("Inventory updated successfully!");
                        break;
                }
            }
        }
        catch (Exception e)
        {
            System.out.println("Error: " + e.getMessage());
        }

        writeInventory(inventoryFile); // Update inventory in file
        if (!orders.isEmpty())
        {
            writeOrderLog(logFile); // Write remaining orders to the order log
        }
    }

    /**
     * Builds a coffee order based on user input.
     * This method prompts the user to select a base coffee type (black coffee or espresso),
     * and allows them to customize the coffee by adding flavored syrup, hot water, milk, sugar, and whipped cream.
     * The user can choose to add multiple coffees to their order.
     *
     * @return The CoffeeOrder object representing the completed coffee order.
     * @throws Exception If an error occurs while building the order.
     * @see CoffeeOrder
     */
    private static CoffeeOrder buildOrder()
    {
        CoffeeOrder order = new CoffeeOrder();
        try
        {
            Scanner input = new Scanner(System.in);
            boolean addCoffee = true;
            while (addCoffee)
            {
                // prompt user to select base coffee type
                System.out.println("Select coffee type:");
                System.out.println("\t1. Black Coffee");
                System.out.println("\t2. Espresso");
                Coffee coffee;

                int option = 0;
                while (option < 1 || option > 2)
                {
                    if (!input.hasNextInt())
                    {
                        System.out.println("Please enter a valid number.");
                        input.nextLine();
                    }
                    else
                    {
                        option = input.nextInt();
                        if (option < 1 || option > 2) System.out.println("Please enter a valid option.");
                    }
                }
                input.nextLine(); // nextInt() doesn't consume newline
                if (option == 2)
                {
                    if (isInInventory("Espresso"))
                    {
                        coffee = new Espresso();
                        inventory.put("Espresso", inventory.get("Espresso") - 1);
                    }
                    else
                    {
                        System.out.println("No Espresso left in inventory.");
                        continue;
                    }
                }
                else
                {
                    // make BlackCoffee the default case
                    if (isInInventory("Black Coffee"))
                    {
                        coffee = new BlackCoffee();
                        inventory.put("Black Coffee", inventory.get("Black Coffee") - 1);
                    }
                    else
                    {
                        System.out.println("No Black Coffee left in inventory.");
                        continue;
                    }
                }

                // prompt user for any customizations
                while (option != 0)
                {
                    System.out.println(String.format("Coffee brewing: %s.", coffee.printCoffee()));
                    System.out.println("Would you like to add anything to your coffee?");
                    System.out.println("\t1. Flavored Syrup");
                    System.out.println("\t2. Hot Water");
                    System.out.println("\t3. Milk");
                    System.out.println("\t4. Sugar");
                    System.out.println("\t5. Whipped Cream");
                    System.out.println("\t0. NO - Finish Coffee");

                    while (!input.hasNextInt())
                    {
                        System.out.println("Please enter a valid number.");
                        input.nextLine();
                    }
                    option = input.nextInt();
                    input.nextLine();
                    coffee = switch (option)
                    {
                        case 1 ->
                        {
                            System.out.println("Please select a flavor:");
                            for (WithFlavor.Syrup flavor : WithFlavor.Syrup.values())
                            {
                                System.out.println("\t" + String.format("%d. %s", flavor.ordinal() + 1, flavor));
                            }
                            int max = WithFlavor.Syrup.values().length;
                            option = 0;
                            while (option < 1 || option > max)
                            {
                                if (!input.hasNextInt())
                                {
                                    System.out.println("Please enter a valid number.");
                                    input.nextLine();
                                }
                                else
                                {
                                    option = input.nextInt();
                                    if (option < 1 || option > max) System.out.println("Please enter a valid option.");
                                }
                            }
                            input.nextLine();
                            WithFlavor.Syrup flavor = WithFlavor.Syrup.values()[option - 1];
                            option = 1;
                            yield new WithFlavor(coffee, flavor);
                        }
                        case 2 ->
                        {
                            // WithHotWater is a specific case
                            if (isInInventory("Hot Water"))
                            {
                                coffee = new WithHotWater(coffee);
                                inventory.put("Hot Water", inventory.get("Hot Water") - 1);
                                yield coffee;
                            }
                            else
                            {
                                System.out.println("No Hot Water left in inventory.");
                                yield coffee;
                            }
                        }
                        case 3 ->
                        {
                            // WithMilk is a specific case
                            if (isInInventory("Milk"))
                            {
                                coffee = new WithMilk(coffee);
                                inventory.put("Milk", inventory.get("Milk") - 1);
                                yield coffee;
                            }
                            else
                            {
                                System.out.println("No Milk left in inventory.");
                                yield coffee;
                            }
                        }
                        case 4 ->
                        {
                            // WithSugar is a specific case
                            if (isInInventory("Sugar"))
                            {
                                coffee = new WithSugar(coffee);
                                inventory.put("Sugar", inventory.get("Sugar") - 1);
                                yield coffee;
                            }
                            else
                            {
                                System.out.println("No Sugar left in inventory.");
                                yield coffee;
                            }
                        }
                        case 5 ->
                        {
                            // WithWhippedCream is a specific case
                            if (isInInventory("Whipped Cream"))
                            {
                                coffee = new WithWhippedCream(coffee);
                                inventory.put("Whipped Cream", inventory.get("Whipped Cream") - 1);
                                yield coffee;
                            }
                            else
                            {
                                System.out.println("No Whipped Cream left in inventory.");
                                yield coffee;
                            }
                        }
                        default ->
                        {
                            if (option != 0) System.out.println("Please enter valid option.");
                            yield coffee;
                        }
                    };
                }
                order.addCoffee(coffee);

                System.out.println("Would you like to order another coffee (Y or N)?");
                String yn = input.nextLine();
                while (!(yn.equalsIgnoreCase("N") || yn.equalsIgnoreCase("Y")))
                {
                    System.out.println("Please enter Y or N.");
                    yn = input.nextLine();
                }
                addCoffee = !yn.equalsIgnoreCase("N");
            }
        }
        catch (Exception e)
        {
            System.out.println("Error building order: " + e.getMessage());
        }
        return order;
    }

    /**
     * Reads the inventory data from a file and updates the inventory map.
     * Each line of the file should be in the format "ingredient=quantity".
     * The method parses each line, extracts the ingredient and quantity,
     * and updates the inventory map accordingly.
     *
     * @param filePath The path to the inventory file.
     * @throws Exception If an error occurs while reading the inventory file.
     */
    private static void readInventory(String filePath)
    {
        inventory.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath)))
        {
            String line;
            while ((line = reader.readLine()) != null)
            {
                String[] parts = line.split("=");
                if (parts.length == 2)
                {
                    String ingredient = parts[0].trim();
                    int quantity = Integer.parseInt(parts[1].trim());
                    inventory.put(ingredient, quantity);
                }
            }
        }
        catch (Exception e)
        {
            System.out.println("Error reading inventory: " + e.getMessage());
        }
    }

    /**
     * Writes the current inventory data to a file.
     * The method iterates over the inventory map and writes each entry
     * to the file in the format "ingredient=quantity" on a new line.
     *
     * @param filePath The path to the inventory file.
     * @throws Exception If an error occurs while writing the inventory file.
     */
    private static void writeInventory(String filePath)
    {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath)))
        {
            for (Map.Entry<String, Integer> entry : inventory.entrySet())
            {
                writer.write(entry.getKey() + "= " + entry.getValue());
                writer.newLine();
            }
            System.out.println("Inventory written to file: " + filePath);
        }
        catch (Exception e)
        {
            System.out.println("Error writing inventory: " + e.getMessage());
        }
    }

    /**
     * Expands the inventory by adding a new ingredient and its quantity.
     * The method prompts the user to enter the name of the ingredient and its quantity,
     * then updates the inventory map by either adding the new ingredient or increasing
     * the quantity of an existing ingredient.
     *
     * @throws Exception If an error occurs during the expansion of the inventory.
     */
    private static boolean expandInventory(boolean addMore)
    {
        try (Scanner input = new Scanner(System.in))
        {
            while (addMore)
            {
                System.out.println("Enter the name of the ingredient to add:");
                String ingredient = input.nextLine();

                System.out.println("Enter the quantity to add:");
                int quantity = 0;
                boolean validInput = false;
                while (!validInput)
                {
                    if (input.hasNextInt())
                    {
                        quantity = input.nextInt();
                        validInput = true;
                    }
                    else
                    {
                        System.out.println("Please enter a valid number.");
                        input.nextLine(); // Consume invalid input
                    }
                }
                input.nextLine(); // Consume newline

                if (inventory.containsKey(ingredient))
                {
                    int currentQuantity = inventory.get(ingredient);
                    inventory.put(ingredient, currentQuantity + quantity);
                }
                else
                {
                    inventory.put(ingredient, quantity);
                }

                System.out.println("Do you want to add another ingredient? (Y/N)");
                String answer = input.nextLine();
                if (!answer.equalsIgnoreCase("Y"))
                {
                    addMore = false;
                }
            }
            return true; // Returning true to indicate that the user wants to continue
        } catch (Exception e) {
            System.out.println("Error expanding inventory: " + e.getMessage());
            return false; // Returning false in case of any error
        }
    }

    /**
     * Writes the list of orders to the order log file.
     * The method appends each order in the list to the existing order log file,
     * creating a new line for each order.
     *
     * @param filePath The file path of the order log file.
     * @throws Exception If an error occurs while writing the order log.
     */
    private static void writeOrderLog(String filePath)
    {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true)))
        {
            for (CoffeeOrder order : orders)
            {
                writer.write(order.printOrder());
                writer.newLine();
            }
            orders.clear();
            System.out.println("Order log written to file: " + filePath);
        }
        catch (Exception e)
        {
            System.out.println("Error writing order log: " + e.getMessage());
        }
    }

    /**
     * Prints the current inventory items and their quantities to the console.
     * The method iterates over the inventory map and displays each item along with its quantity.
     */
    private static void printInventory()
    {
        for (Map.Entry<String, Integer> entry : inventory.entrySet())
        {
            System.out.println(entry.getKey() + "= " + entry.getValue());
        }
    }

    /**
     * Checks if a given ingredient is present in the inventory and has a quantity greater than zero.
     *
     * @param ingredient the name of the ingredient to check
     * @return true if the ingredient is in the inventory and has a quantity greater than zero, false otherwise
     */
    private static boolean isInInventory(String ingredient)
    {
        return inventory.containsKey(ingredient) && inventory.get(ingredient) > 0;
    }
}
